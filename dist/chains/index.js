"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.chainMapCombine = void 0;
function chainMapCombine([chain, mapper]) {
    const preReceiveForeignCheck = chain.preReceiveForeignCheck &&
        ((t, r) => chain.preReceiveForeignCheck(mapper.tokenFromDomain(t), mapper.addrFromDomain(r)));
    const preReceiveNativeCheck = chain.preReceiveNativeCheck &&
        ((t, r) => chain.preReceiveNativeCheck(mapper.tokenFromDomain(t), mapper.addrFromDomain(r)));
    return {
        balance: (a) => chain.balance(mapper.default(a)).then(mapper.bigNumToDomain),
        tokenBalance: (t, a) => chain
            .tokenBalance(mapper.tokenFromDomain(t), mapper.addrFromDomain(a))
            .then(mapper.bigNumToDomain),
        tokenParams: (t) => chain.tokenParams(mapper.tokenFromDomain(t)).then(mapper.default),
        estimateTransferNative: () => chain.estimateTransferNative().then(mapper.bigNumToDomain),
        estimateTransferWrapped: () => chain.estimateTransferWrapped().then(mapper.bigNumToDomain),
        preTransfer: (s, t, a) => chain
            .preTransfer(s, mapper.tokenFromDomain(t), mapper.bigNumFromDomain(a))
            .then((t) => t && mapper.txnToDomain(t)),
        transferNative: (s, t, c, a, to, tf) => chain
            .transferNative(s, mapper.tokenFromDomain(t), c, mapper.bigNumFromDomain(a), to, mapper.bigNumFromDomain(tf))
            .then(mapper.txnToDomain),
        transferWrapped: (s, t, c, a, to, tf) => chain
            .transferWrapped(s, mapper.tokenFromDomain(t), c, mapper.bigNumFromDomain(a), to, mapper.bigNumFromDomain(tf))
            .then(mapper.txnToDomain),
        preReceiveForeignCheck,
        preReceiveNativeCheck,
    };
}
exports.chainMapCombine = chainMapCombine;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY2hhaW5zL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQW1GQSxTQUFnQixlQUFlLENBQXFCLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FFakU7SUFDQyxNQUFNLHNCQUFzQixHQUMxQixLQUFLLENBQUMsc0JBQXNCO1FBQzVCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FDUixLQUFLLENBQUMsc0JBQXVCLENBQzNCLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLEVBQ3pCLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQ3pCLENBQUMsQ0FBQztJQUVQLE1BQU0scUJBQXFCLEdBQ3pCLEtBQUssQ0FBQyxxQkFBcUI7UUFDM0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUNSLEtBQUssQ0FBQyxxQkFBc0IsQ0FDMUIsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsRUFDekIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FDekIsQ0FBQyxDQUFDO0lBRVAsT0FBTztRQUNMLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQ2IsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUM7UUFDOUQsWUFBWSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQ3JCLEtBQUs7YUFDRixZQUFZLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2pFLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDO1FBQ2hDLFdBQVcsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQ2pCLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQ25FLHNCQUFzQixFQUFFLEdBQUcsRUFBRSxDQUMzQixLQUFLLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQztRQUU1RCx1QkFBdUIsRUFBRSxHQUFHLEVBQUUsQ0FDNUIsS0FBSyxDQUFDLHVCQUF1QixFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUM7UUFFN0QsV0FBVyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUN2QixLQUFLO2FBQ0YsV0FBVyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNyRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTVDLGNBQWMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FDckMsS0FBSzthQUNGLGNBQWMsQ0FDYixDQUFDLEVBQ0QsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsRUFDekIsQ0FBQyxFQUNELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsRUFDMUIsRUFBRSxFQUNGLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FDNUI7YUFDQSxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQztRQUU3QixlQUFlLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQ3RDLEtBQUs7YUFDRixlQUFlLENBQ2QsQ0FBQyxFQUNELE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLEVBQ3pCLENBQUMsRUFDRCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLEVBQzFCLEVBQUUsRUFDRixNQUFNLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQzVCO2FBQ0EsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUM7UUFDN0Isc0JBQXNCO1FBQ3RCLHFCQUFxQjtLQUN0QixDQUFDO0FBQ0osQ0FBQztBQWpFRCwwQ0FpRUMifQ==