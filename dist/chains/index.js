"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.chainMapCombine = void 0;
function chainMapCombine([chain, mapper]) {
    const preReceiveForeignCheck = chain.preReceiveForeignCheck &&
        ((t, r) => chain.preReceiveForeignCheck(mapper.tokenFromDomain(t), mapper.addrFromDomain(r)));
    const preReceiveNativeCheck = chain.preReceiveNativeCheck &&
        ((t, r) => chain.preReceiveNativeCheck(mapper.tokenFromDomain(t), mapper.addrFromDomain(r)));
    return {
        tokenBalance: (t, a) => chain
            .tokenBalance(mapper.tokenFromDomain(t), mapper.addrFromDomain(a))
            .then(mapper.bigNumToDomain),
        tokenParams: (t) => chain.tokenParams(mapper.tokenFromDomain(t)).then(mapper.bigNumToDomain),
        estimateTransferNative: () => chain.estimateTransferNative().then(mapper.bigNumToDomain),
        estimateTransferWrapped: () => chain.estimateTransferWrapped().then(mapper.bigNumToDomain),
        preTransfer: (s, t, a) => chain
            .preTransfer(s, mapper.tokenFromDomain(t), mapper.bigNumFromDomain(a))
            .then((t) => t && mapper.txnToDomain(t)),
        transferNative: (s, t, c, a, to, tf) => chain
            .transferNative(s, mapper.tokenFromDomain(t), c, mapper.bigNumFromDomain(a), to, mapper.bigNumFromDomain(tf))
            .then(mapper.txnToDomain),
        transferWrapped: (s, t, c, a, to, tf) => chain
            .transferWrapped(s, mapper.tokenFromDomain(t), c, mapper.bigNumFromDomain(a), to, mapper.bigNumFromDomain(tf))
            .then(mapper.txnToDomain),
        preReceiveForeignCheck,
        preReceiveNativeCheck,
    };
}
exports.chainMapCombine = chainMapCombine;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY2hhaW5zL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQWdGQSxTQUFnQixlQUFlLENBQXFCLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FFakU7SUFDQyxNQUFNLHNCQUFzQixHQUMxQixLQUFLLENBQUMsc0JBQXNCO1FBQzVCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FDUixLQUFLLENBQUMsc0JBQXVCLENBQzNCLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLEVBQ3pCLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQ3pCLENBQUMsQ0FBQztJQUVQLE1BQU0scUJBQXFCLEdBQ3pCLEtBQUssQ0FBQyxxQkFBcUI7UUFDM0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUNSLEtBQUssQ0FBQyxxQkFBc0IsQ0FDMUIsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsRUFDekIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FDekIsQ0FBQyxDQUFDO0lBRVAsT0FBTztRQUNMLFlBQVksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUNyQixLQUFLO2FBQ0YsWUFBWSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNqRSxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQztRQUNoQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUNqQixLQUFLLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQztRQUMxRSxzQkFBc0IsRUFBRSxHQUFHLEVBQUUsQ0FDM0IsS0FBSyxDQUFDLHNCQUFzQixFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUM7UUFFNUQsdUJBQXVCLEVBQUUsR0FBRyxFQUFFLENBQzVCLEtBQUssQ0FBQyx1QkFBdUIsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDO1FBRTdELFdBQVcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FDdkIsS0FBSzthQUNGLFdBQVcsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDckUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUU1QyxjQUFjLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQ3JDLEtBQUs7YUFDRixjQUFjLENBQ2IsQ0FBQyxFQUNELE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLEVBQ3pCLENBQUMsRUFDRCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLEVBQzFCLEVBQUUsRUFDRixNQUFNLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQzVCO2FBQ0EsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUM7UUFFN0IsZUFBZSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUN0QyxLQUFLO2FBQ0YsZUFBZSxDQUNkLENBQUMsRUFDRCxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxFQUN6QixDQUFDLEVBQ0QsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxFQUMxQixFQUFFLEVBQ0YsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUM1QjthQUNBLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDO1FBQzdCLHNCQUFzQjtRQUN0QixxQkFBcUI7S0FDdEIsQ0FBQztBQUNKLENBQUM7QUEvREQsMENBK0RDIn0=